package fielden.com.ua.search;

import java.util.ArrayList;

public class Graph<T> {
	final private ArrayList<Vertex<T>> verteces;

	public Graph() {
		verteces = new ArrayList<Vertex<T>>();
	}

	public boolean addVertex(Vertex<T> vertex) {
		if (verteces.contains(vertex)) {
			return false;
		}
		verteces.add(vertex);
		return true;
	}

	public boolean contains(Vertex<T> vertex) {
		return verteces.contains(vertex);
	}

	public Vertex<T> get(int index) {
		return verteces.get(index);
	}

	public int count() {
		return verteces.size();
	}

	public boolean equals(Graph<T> obj) {
		if (this.verteces.size() != obj.verteces.size()) {
			return false;
		}
		ArrayList<Vertex<T>> temp = new ArrayList<Vertex<T>>(this.verteces);
		return (!temp.retainAll(obj.verteces));
	}
	public static class Builder<T> implements IVisitor<T>{
		Graph g = new Graph<T>();
		public Builder<T> vertex(int id, T element){
			g.addVertex((Vertex) g.verteces.set(id, element));
			return this;
		}
		@Override
		public void visitor(Vertex<T> vertex) {
			
		}
		
	}
	 private Graph<T>(Builder<T> builder){
		return this;
	 }

	public static void main(String[] args) {
		Graph g = new Graph<Integer>();
		g.builder.vertex(1, 12);
		g.builder.vertex(2, "node");
		((Vertex) g.verteces.get(2)).addEdge((Vertex) g.verteces.get(1));
	}

}