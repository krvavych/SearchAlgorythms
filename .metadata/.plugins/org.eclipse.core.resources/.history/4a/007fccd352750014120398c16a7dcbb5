package fielden.com.ua.serch;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.HashSet;
import java.util.Set;

import org.junit.Test;

import fielden.com.ua.search.Builder;
import fielden.com.ua.search.Edge;
import fielden.com.ua.search.Graph;
import fielden.com.ua.search.Vertex;

public class TestGraph {

	@Test
	public void graph_created_by_builder_should_be_equal_to_hand_createg_graph() {
		final Set<Vertex> vertexs = new HashSet<Vertex>();
		final Set<Edge> edges = new HashSet<Edge>();
		final Vertex v1 = new Vertex(1, "element");
		final Vertex v2 = new Vertex(2, "element");
		vertexs.add(v1);
		vertexs.add(v2);
		edges.add(new Edge(v1, v2));
		final Graph graph = new Graph(edges, vertexs);
		System.out.println(graph.getAdjacencyVertrxOfVertex().toString());
		System.out.println(graph.getEdges().toString());

		final Builder builder = new Builder();
		builder.addVertex(1, "element");
		builder.addVertex(2, "element");
		builder.addEdge(v1, v2);
		final Graph buildGraph = builder.build();
		System.out.println(buildGraph.getAdjacencyVertrxOfVertex().toString());
		System.out.println(buildGraph.getEdges().toString());
		assertTrue(graph.equals(buildGraph));
		assertTrue(graph.hashCode() == buildGraph.hashCode());
	}

	@Test
	public void graph_should_not_have_null_verteces() {
		try {
			new Graph(null, null);
			fail();
		} catch (final Exception e) {

		}
	}

	@Test
	public void graph_should_not_have_edges_with_verteces_wich_donot_exist_in_setOfVertex() {
		final Set<Vertex> vertexs1 = new HashSet<Vertex>();
		final Set<Edge> edges1 = new HashSet<Edge>();
		final Vertex v1 = new Vertex(1, "element");
		final Vertex v2 = new Vertex(2, "element");
		final Vertex v3 = new Vertex(3, "element");
		vertexs1.add(v1);
		vertexs1.add(v2);
		edges1.add(new Edge(v1, v2));
		edges1.add(new Edge(v1, v3));
		try {
			new Graph(edges1, vertexs1);
			fail();
		} catch (final Exception e) {
		}
	}
}
