package fielden.com.ua.search;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class Graph {
	public Set<Vertex> verteces = new HashSet<Vertex>();
	public Set<Edge> edges = new HashSet<Edge>();;
	public final  Map<Vertex, Set<Edge>> edgesOfVertex;
	public final Map<Vertex, Set<Vertex>> adjacencyVertrxOfVertex;

	public boolean contains(final Vertex vertex) {
		return verteces.contains(vertex);
	}

	public int numberOfVertexes() {
		return verteces.size();
	}

	public void addEdge(final Vertex s, final Vertex d) {
		final Edge edge = new Edge(s, d);
		if (!edges.contains(edge)) {
			edges.add(edge);
		}
		if (!verteces.contains(s)) {
			verteces.add(s);
		}
		if (!verteces.contains(d)) {
			verteces.add(d);
		}
	}
	public Graph(final Builder builder){
		this.edges = builder.edges;
		this.verteces = builder.vertexes;
		this.edgesOfVertex = builder.edgesOfVertex;
		this.adjacencyVertrxOfVertex = builder.adjacencyVertrxOfVertex;
	}
	public void dfs(final Graph g, final Vertex v, final Builder visitor){
		final Iterator<Vertex> graph = new DeapthFirstIterator(g, v);
		while (graph.hasNext()) {
			//builder.visitor(graph.next());
			visitor.toString();
			System.out.println(graph.next().toString());
		}
	}

	public static void main(final String[] args) {

	}

}