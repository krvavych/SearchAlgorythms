package fielden.com.ua.search;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class Graph {
	public final Set<Vertex> verteces;
	public final Set<Edge> edges = new Set<Edge>(){

	};

	public boolean contains(final Vertex vertex) {
		return verteces.contains(vertex);
	}

	public int numberOfVerixes() {
		return verteces.size();
	}

	public void addEdge(final Vertex s, final Vertex d) {
		final Edge edge = new Edge(s, d);
		if (!edges.contains(edge)) {
			edges.add(edge);
		}
		if (!verteces.contains(s)) {
			verteces.add(s);
		}
		if (!verteces.contains(d)) {
			verteces.add(d);
		}
	}

	public Vertex getS(final ArrayList<Edge> edges, final int index) {
		return edges.get(index).getSource();
	}

	public Vertex getD(final ArrayList<Edge> edges, final int index) {
		return edges.get(index).getDestination();
	}

	public Iterable<Vertex> getNeighbors(final Vertex node) {
		final List<Vertex> neighbors = new ArrayList<Vertex>();
		for (int i = 0; i <= edges.size(); i++) {
			if ((node.getId() == (getS(edges, i).getId()) && ((node
					.getElement())) == (getS(edges, i)))) {
				neighbors.add(getD(edges, i));
			} else if ((node.getId() == (getD(edges, i).getId()) && ((node
					.getElement())) == (getD(edges, i)))) {
				neighbors.add(getS(edges, i));
			}
		}
		return neighbors;
	}

	public List<Vertex> getVerteces() {
		return Collections.unmodifiableList(verteces);
	}

	public static void dfs(final Graph g,
			final Vertex startingNode) {
		final Builder builder = new Builder();
		final Iterator<Vertex> g1 = new DeapthFirstIterator(g,
				startingNode);
		final List element = new ArrayList();
		while (g1.hasNext()) {
			System.out.println(g1.next());
			element.add(builder.visitor(g1.next()));
		}
		System.out.println(element.toString());
	}

	public static void main(final String[] args) {
		final Builder<Object> builder;
		final Graph g = new Graph();
		final Vertex<Object> v1 = new Vertex<Object>(1, "start");
		final Vertex<Object> v2 = new Vertex<Object>(2, 12);
		final Vertex<Object> v3 = new Vertex<Object>(2, "vertex");
		final Vertex<Object> v4 = new Vertex<Object>(4, "end");
		g.addEdge(v1, v2);
		g.addEdge(v2, v1);
		g.addEdge(v1, v3);
		g.addEdge(v3, v1);
		g.addEdge(v3, v4);
		g.addEdge(v4, v3);
		dfs(g, v1);
	}
}