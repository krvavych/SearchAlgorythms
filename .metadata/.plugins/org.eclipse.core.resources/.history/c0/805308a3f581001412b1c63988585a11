package ua.com.fielden.graph;

import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

import ua.com.fielden.graph.structure.FifoQueue;
import ua.com.fielden.graph.structure.FiloQueue;
import ua.com.fielden.graph.structure.MyQueue;

public class Search implements Iterable<Vertex> {
	private Graph graph;
	private Set<Vertex> visited = new HashSet<>();
	private SearchBy searchParameter;
	private Vertex startingVertex;
	private MyQueue q;

	public enum SearchBy {
		Dfs, Bfs
	}

	public Search(final Graph g, final SearchBy parameter, final Vertex startingVertex) {
		this.graph = g;
		this.searchParameter = parameter;
		this.startingVertex = startingVertex;
		if(this.searchParameter == SearchBy.Bfs){
			this.q = new FifoQueue();
		}else {
			this.q = new FiloQueue();
		}
	}

	@Override
	public Iterator<Vertex> iterator() {
		return new BfsOrDfsIterator();
	}

	public class BfsOrDfsIterator implements Iterator<Vertex> {
		private Vertex next;

		public BfsOrDfsIterator() {
			for (final Vertex vertex : graph.getVerteces()) {
				if (vertex == startingVertex) {
					q.add(vertex);
					visited.add(vertex);
				}
			}
		}

		@Override
		public void remove() {
			throw new UnsupportedOperationException();
		}

		@Override
		public boolean hasNext() {
				return !q.isEmpty();
		}

		@Override
		public Vertex next() {
				next = q.remove();
			for (final Vertex neighbor : graph.getAdjacencyVertrxOfVertex().get(next)) {
				if (!visited.contains(neighbor)) {
					q.add(neighbor);
					visited.add(neighbor);
				}
			}
			return next;
		}
	}
}
