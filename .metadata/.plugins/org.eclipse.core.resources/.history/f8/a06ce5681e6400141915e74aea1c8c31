package fielden.com.ua.search;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Graph {
	private Map<String, List<String>> edges = new HashMap<String, List<String>>();

	public void addEdge(String src, String dest) {
		List<String> srcNeighbors = this.edges.get(src);
		if (srcNeighbors == null) {
			this.edges.put(src, srcNeighbors = new ArrayList<String>());
		}
		srcNeighbors.add(dest);
	}

	public Iterable<String> getNeighbors(String vertex) {
		List<String> neighbors = this.edges.get(vertex);
		if (neighbors == null) {
			return Collections.emptyList();
		} else {
			return Collections.unmodifiableList(neighbors);
		}
	}
	
	public static void BFS(Graph g, String vertex){
		final Iterator<String> graph1 = new BreadthFirstIterator(g, vertex);
		while (graph1.hasNext()) {
			System.out.print(graph1.next().toUpperCase()+' ');
		}

	}

	public static void main(String[] args) {
		final Graph d = new Graph();
		d.addEdge("a", "d");
		d.addEdge("d", "a");
		d.addEdge("d", "b");
		d.addEdge("b", "d");
		d.addEdge("b", "c");
		d.addEdge("c", "b");
		d.addEdge("c", "d");
		d.addEdge("d", "c");
		d.addEdge("c", "h");
		d.addEdge("h", "c");
		d.addEdge("c", "f");
		d.addEdge("f", "c");
		d.addEdge("c", "g");
		d.addEdge("g", "c");
		d.addEdge("f", "g");
		d.addEdge("g", "f");
		d.addEdge("f", "e");
		d.addEdge("e", "f");
		d.addEdge("g", "e");
		d.addEdge("e", "g");
		BFS(d, "a");
		Iterator<String> graph1 = new BreadthFirstIterator(d, "a");
		while (graph1.hasNext()) {
			System.out.print(graph1.next()+' ');
		}
		System.out.println();
		Iterator<String> graph2 = new DeapthFirstIterator(d, "b");
		while (graph2.hasNext()) {
			System.out.print(graph2.next()+' ');
		}

	}
}