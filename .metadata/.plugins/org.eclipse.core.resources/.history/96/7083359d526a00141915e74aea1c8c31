package fielden.com.ua.search;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class Graph<T> {
	final private ArrayList<Vertex<T>> verteces;
	final private ArrayList<Edge<T>> edges;

	public Graph() {
		verteces = new ArrayList<Vertex<T>>();
		edges = new ArrayList<Edge<T>>();
	}

	public boolean addVertex(Vertex<T> vertex) {
		if (verteces.contains(vertex)) {
			return false;
		}
		verteces.add(vertex);
		return true;
	}

	public boolean contains(Vertex<T> vertex) {
		return verteces.contains(vertex);
	}

	public Vertex<T> get(int index) {
		return verteces.get(index);
	}

	public int count() {
		return verteces.size();
	}

	public boolean equals(Graph<T> obj) {
		if (this.verteces.size() != obj.verteces.size()) {
			return false;
		}
		ArrayList<Vertex<T>> temp = new ArrayList<Vertex<T>>(this.verteces);
		return (!temp.retainAll(obj.verteces));
	}

	public void addEdge(int sId, int dId) {
		List<Edge<T>> srcNeighbors =  this.edges;
		if (srcNeighbors == null) {
			this.edges.set(sId,
					 (Edge<T>) (srcNeighbors = new ArrayList<Edge<T>>()));
		}
		srcNeighbors.add(dId);
	}

	public Iterable<Integer> getNeighbors(int id) {
		List<Integer> neighbors = (List<Integer>) this.edges.get(id);
		if (neighbors == null) {
			return Collections.emptyList();
		} else {
			return Collections.unmodifiableList(neighbors);
		}
	}

	public Graph(Builder<T> builder) {
		verteces = builder.vertexes;
		edges = builder.edges;
	}

	public static void dfs(Graph<Object> g, int id) {
		Builder<Object> b = new Builder<Object>();
		Iterator<Integer> g1 = new DeapthFirstIterator((Graph<Object>) g, id);
		final ArrayList<Object> element = new ArrayList<Object>();
		while (g1.hasNext()) {
			System.out.println(g1.next());
			element.add(b.vertex.getElement());
		}
		System.out.println(element.toString());
	}

	public static void main(String[] args) {
		Graph<Object> g = new Graph<Object>();
		Builder<Object> builder = new Builder<Object>();
		Vertex<Object> v1 = new Vertex<Object>(g.addVertex(builder.vertex(1, "a")));
		Vertex<Object> v2 = new Vertex<Object>(g.addVertex(builder.vertex(2, "b")));
		Vertex<Object> v3 = new Vertex<Object>(g.addVertex(builder.vertex(3, "c")));
		Vertex<Object> v4 = new Vertex<Object>(g.addVertex(builder.vertex(4, "d")));
		g.addEdge(v1.getId(), v1.getId());
		g.addEdge(v2.getId(), v2.getId());
		g.addEdge(v1.getId(), v3.getId());
		g.addEdge(v3.getId(), v1.getId());
		g.addEdge(v3.getId(), v4.getId());
		g.addEdge(v4.getId(), v3.getId());
		dfs(g, 2);
	}
}