package fielden.com.ua.search;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Graph {
	public Set<Vertex> verteces;
	public Set<Edge> edges;
	public final  Map<Vertex, Set<Edge>> edgesOfVertex;
	public final Map<Vertex, Set<Vertex>> adjacencyVertrxOfVertex;

	public boolean contains(final Vertex vertex) {
		return verteces.contains(vertex);
	}

	public int numberOfVertexes() {
		return verteces.size();
	}

	public void addEdge(final Vertex s, final Vertex d) {
		final Edge edge = new Edge(s, d);
		if (!edges.contains(edge)) {
			edges.add(edge);
		}
		if (!verteces.contains(s)) {
			verteces.add(s);
		}
		if (!verteces.contains(d)) {
			verteces.add(d);
		}
	}
	public Graph(final Builder builder){
		this.edges = builder.edges;
		this.verteces = builder.vertexes;
		this.edgesOfVertex = builder.edgesOfVertex;
		this.adjacencyVertrxOfVertex = builder.adjacencyVertrxOfVertex;
	}
	public void dfs(Graph g, Vertex v){
		Builder builder = new Builder();
		final Iterator<Vertex> graph = new DeapthFirstIterator(g, v);
		while (graph.hasNext()) {
			builder.visitor(graph.next());
			System.out.println(graph.next().toString());
		}
	}

	public static void main(final String[] args) {
		Builder builder = new Builder();
		final Vertex v1 = builder.addVertex(1, "element", vertexs);
		final Vertex v2 = builder.addVertex(2, "element", vertexs);
		final Vertex v3 = builder.addVertex(3, "element", vertexs);
		final Vertex v4 = builder.addVertex(4, "element", vertexs);
		final Vertex v5 = builder.addVertex(5, "element", vertexs);
		final Vertex v6 = builder.addVertex(6, "element", vertexs);
		builder.addEdge(v1, v2, edges);
		builder.addEdge(v2, v1, edges);
		builder.addEdge(v3, v2, edges);
		builder.addEdge(v2, v3, edges);
		builder.addEdge(v4, v3, edges);
		builder.addEdge(v3, v4, edges);
		builder.addEdge(v2, v5, edges);
		builder.addEdge(v5, v2, edges);
		builder.addEdge(v6, v4, edges);
		builder.addEdge(v4, v6, edges);
		builder.creationAdjacencyLists(eMap, vertexs, edges);
		final Graph g = new Graph(builder);
		g.verteces = vertexs;
		g.edges = edges;
	}

}